type Account @entity(immutable: true) {
	id: Bytes! # Ethereum address
	loansAsBorrower: [Loan!]! @derivedFrom(field: "borrower")
	loansAsLender: [Loan!]! @derivedFrom(field: "lender")
}

type Asset @entity(immutable: true) {
	id: String! # Combination of chainId and loanId from contract

	category: Int!
	assetAddress: Bytes!
	assetId: BigInt!
	amount: BigDecimal!
}

enum LoanStatus {
  Active
  Repaid
  Defaulted
  Claimed
}

type Loan @entity(immutable: false) {
	# Combination of chainId and loanId from contract
	id: String!

	# Loan ID from contract event
	loanId: BigInt!
  
  # Proposal contract address
  proposalContract: Bytes!

  # Loan contract address
	contractAddress: Bytes!

  # Hash of accepted proposal
	proposalHash: Bytes!

  borrower: Account!
  lender: Account!

  createdAt: BigInt!

  # Terms

  # Duration
  duration: BigInt!

  # Default deadline timestamp (createdAt + duration)
  defaultDeadline: BigInt!

  # Collateral
  collateral: Asset!

  # Credit
  credit: Asset!

  status: LoanStatus!

	extra: Bytes!

  # TODO also add Loan contract version?
}

# TODO add version

type ProposalMade @entity(immutable: true) {
  id: Bytes!
  proposalHash: Bytes! # bytes32
  proposer: Bytes! # address
  proposal_collateralCategory: Int! # uint8
  proposal_collateralAddress: Bytes! # address
  proposal_collateralId: BigInt! # uint256
  proposal_collateralAmount: BigInt! # uint256
  proposal_checkCollateralStateFingerprint: Boolean! # bool
  proposal_collateralStateFingerprint: Bytes! # bytes32
  proposal_creditAddress: Bytes! # address
  proposal_creditAmount: BigInt! # uint256
  proposal_availableCreditLimit: BigInt! # uint256
  proposal_utilizedCreditId: Bytes! # bytes32
  proposal_fixedInterestAmount: BigInt! # uint256
  proposal_accruingInterestAPR: Int! # uint24
  proposal_durationOrDate: BigInt! # uint32
  proposal_expiration: BigInt! # uint40
  proposal_allowedAcceptor: Bytes! # address
  proposal_proposer: Bytes! # address
  proposal_proposerSpecHash: Bytes! # bytes32
  proposal_isOffer: Boolean! # bool
  proposal_refinancingLoanId: BigInt! # uint256
  proposal_nonceSpace: BigInt! # uint256
  proposal_nonce: BigInt! # uint256
  proposal_loanContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type SimpleLoanListProposalProposalMade @entity(immutable: true) {
  id: Bytes!
  proposalHash: Bytes! # bytes32
  proposer: Bytes! # address
  proposal_collateralCategory: Int! # uint8
  proposal_collateralAddress: Bytes! # address
  proposal_collateralIdsWhitelistMerkleRoot: Bytes! # bytes32
  proposal_collateralAmount: BigInt! # uint256
  proposal_checkCollateralStateFingerprint: Boolean! # bool
  proposal_collateralStateFingerprint: Bytes! # bytes32
  proposal_creditAddress: Bytes! # address
  proposal_creditAmount: BigInt! # uint256
  proposal_availableCreditLimit: BigInt! # uint256
  proposal_utilizedCreditId: Bytes! # bytes32
  proposal_fixedInterestAmount: BigInt! # uint256
  proposal_accruingInterestAPR: Int! # uint24
  proposal_durationOrDate: BigInt! # uint32
  proposal_expiration: BigInt! # uint40
  proposal_allowedAcceptor: Bytes! # address
  proposal_proposer: Bytes! # address
  proposal_proposerSpecHash: Bytes! # bytes32
  proposal_isOffer: Boolean! # bool
  proposal_refinancingLoanId: BigInt! # uint256
  proposal_nonceSpace: BigInt! # uint256
  proposal_nonce: BigInt! # uint256
  proposal_loanContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type SimpleLoanElasticProposalProposalMade @entity(immutable: true) {
  id: Bytes!
  proposalHash: Bytes! # bytes32
  proposer: Bytes! # address
  proposal_collateralCategory: Int! # uint8
  proposal_collateralAddress: Bytes! # address
  proposal_collateralId: BigInt! # uint256
  proposal_checkCollateralStateFingerprint: Boolean! # bool
  proposal_collateralStateFingerprint: Bytes! # bytes32
  proposal_creditAddress: Bytes! # address
  proposal_creditPerCollateralUnit: BigInt! # uint256
  proposal_minCreditAmount: BigInt! # uint256
  proposal_availableCreditLimit: BigInt! # uint256
  proposal_utilizedCreditId: Bytes! # bytes32
  proposal_fixedInterestAmount: BigInt! # uint256
  proposal_accruingInterestAPR: Int! # uint24
  proposal_durationOrDate: BigInt! # uint32
  proposal_expiration: BigInt! # uint40
  proposal_allowedAcceptor: Bytes! # address
  proposal_proposer: Bytes! # address
  proposal_proposerSpecHash: Bytes! # bytes32
  proposal_isOffer: Boolean! # bool
  proposal_refinancingLoanId: BigInt! # uint256
  proposal_nonceSpace: BigInt! # uint256
  proposal_nonce: BigInt! # uint256
  proposal_loanContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type SimpleLoanElasticChainlinkProposalProposalMade @entity(immutable: true) {
  id: Bytes!
  proposalHash: Bytes! # bytes32
  proposer: Bytes! # address
  proposal_collateralCategory: Int! # uint8
  proposal_collateralAddress: Bytes! # address
  proposal_collateralId: BigInt! # uint256
  proposal_checkCollateralStateFingerprint: Boolean! # bool
  proposal_collateralStateFingerprint: Bytes! # bytes32
  proposal_creditAddress: Bytes! # address
  proposal_feedIntermediaryDenominations: [Bytes!]! # address[]
  proposal_feedInvertFlags: [Boolean!]! # bool[]
  proposal_loanToValue: BigInt! # uint256
  proposal_minCreditAmount: BigInt! # uint256
  proposal_availableCreditLimit: BigInt! # uint256
  proposal_utilizedCreditId: Bytes! # bytes32
  proposal_fixedInterestAmount: BigInt! # uint256
  proposal_accruingInterestAPR: Int! # uint24
  proposal_durationOrDate: BigInt! # uint32
  proposal_expiration: BigInt! # uint40
  proposal_allowedAcceptor: Bytes! # address
  proposal_proposer: Bytes! # address
  proposal_proposerSpecHash: Bytes! # bytes32
  proposal_isOffer: Boolean! # bool
  proposal_refinancingLoanId: BigInt! # uint256
  proposal_nonceSpace: BigInt! # uint256
  proposal_nonce: BigInt! # uint256
  proposal_loanContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ExtensionProposalMade @entity(immutable: true) {
  id: Bytes!
  extensionHash: Bytes! # bytes32
  proposer: Bytes! # address
  proposal_loanId: BigInt! # uint256
  proposal_compensationAddress: Bytes! # address
  proposal_compensationAmount: BigInt! # uint256
  proposal_duration: BigInt! # uint40
  proposal_expiration: BigInt! # uint40
  proposal_proposer: Bytes! # address
  proposal_nonceSpace: BigInt! # uint256
  proposal_nonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANClaimed @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  defaulted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANCreated @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  proposalHash: Bytes! # bytes32
  proposalContract: Bytes! # address
  refinancingLoanId: BigInt! # uint256
  terms_lender: Bytes! # address
  terms_borrower: Bytes! # address
  terms_duration: BigInt! # uint32
  terms_collateral_category: Int! # uint8
  terms_collateral_assetAddress: Bytes! # address
  terms_collateral_id: BigInt! # uint256
  terms_collateral_amount: BigInt! # uint256
  terms_credit_category: Int! # uint8
  terms_credit_assetAddress: Bytes! # address
  terms_credit_id: BigInt! # uint256
  terms_credit_amount: BigInt! # uint256
  terms_fixedInterestAmount: BigInt! # uint256
  terms_accruingInterestAPR: Int! # uint24
  terms_lenderSpecHash: Bytes! # bytes32
  terms_borrowerSpecHash: Bytes! # bytes32
  lenderSpec_sourceOfFunds: Bytes! # address
  extra: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANExtended @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  originalDefaultTimestamp: BigInt! # uint40
  extendedDefaultTimestamp: BigInt! # uint40
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANPaidBack @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolSupply @entity(immutable: true) {
  id: Bytes!
  asset_category: Int! # uint8
  asset_assetAddress: Bytes! # address
  asset_id: BigInt! # uint256
  asset_amount: BigInt! # uint256
  poolAdapter: Bytes! # address
  pool: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolWithdraw @entity(immutable: true) {
  id: Bytes!
  asset_category: Int! # uint8
  asset_assetAddress: Bytes! # address
  asset_id: BigInt! # uint256
  asset_amount: BigInt! # uint256
  poolAdapter: Bytes! # address
  pool: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultPull @entity(immutable: true) {
  id: Bytes!
  asset_category: Int! # uint8
  asset_assetAddress: Bytes! # address
  asset_id: BigInt! # uint256
  asset_amount: BigInt! # uint256
  origin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultPush @entity(immutable: true) {
  id: Bytes!
  asset_category: Int! # uint8
  asset_assetAddress: Bytes! # address
  asset_id: BigInt! # uint256
  asset_amount: BigInt! # uint256
  beneficiary: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultPushFrom @entity(immutable: true) {
  id: Bytes!
  asset_category: Int! # uint8
  asset_assetAddress: Bytes! # address
  asset_id: BigInt! # uint256
  asset_amount: BigInt! # uint256
  origin: Bytes! # address
  beneficiary: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANBurned @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANMinted @entity(immutable: true) {
  id: Bytes!
  loanId: BigInt! # uint256
  loanContract: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # address
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TagSet @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  tag: Bytes! # bytes32
  hasTag: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultLOANMetadataUriUpdated @entity(immutable: true) {
  id: Bytes!
  newUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeCollectorUpdated @entity(immutable: true) {
  id: Bytes!
  oldFeeCollector: Bytes! # address
  newFeeCollector: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: Int! # uint16
  newFee: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LOANMetadataUriUpdated @entity(immutable: true) {
  id: Bytes!
  loanContract: Bytes! # address
  newUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConfigOwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConfigOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AccessControllerSet @entity(immutable: true) {
  id: Bytes!
  accessController: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeedConfirmed @entity(immutable: true) {
  id: Bytes!
  asset: Bytes! # address
  denomination: Bytes! # address
  latestAggregator: Bytes! # address
  previousAggregator: Bytes! # address
  nextPhaseId: Int! # uint16
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeedProposed @entity(immutable: true) {
  id: Bytes!
  asset: Bytes! # address
  denomination: Bytes! # address
  proposedAggregator: Bytes! # address
  currentAggregator: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Category @entity(immutable: true) {
  # TODO can we make this Bytes?
  id: Int!  # category id
  # TODO have here relation to Assset or AssetInCategory?
  assets: [AssetInCategory!]! @derivedFrom(field: "category")
}

type AssetInCategory @entity(immutable: true) {
  id: Bytes!  # asset address
  category: Category!
}

type CategoryRegistered @entity(immutable: true) {
  id: Bytes!
  assetAddress: Bytes! # address
  category: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CategoryUnregistered @entity(immutable: true) {
  id: Bytes!
  assetAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
