import type { AssetDetailSchemaWorkaround } from "./asset-detail-schema-workaround";
import type { BetaProposalDetailSchemaWorkaroundAllowedAcceptor } from "./beta-proposal-detail-schema-workaround-allowed-acceptor";
import type { BetaProposalDetailSchemaWorkaroundCollateralStateFingerprint } from "./beta-proposal-detail-schema-workaround-collateral-state-fingerprint";
import type { BetaProposalDetailSchemaWorkaroundCreatedFromProposalId } from "./beta-proposal-detail-schema-workaround-created-from-proposal-id";
/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import type { BetaProposalDetailSchemaWorkaroundDuration } from "./beta-proposal-detail-schema-workaround-duration";
import type { BetaProposalDetailSchemaWorkaroundExpiration } from "./beta-proposal-detail-schema-workaround-expiration";
import type { BetaProposalDetailSchemaWorkaroundHash } from "./beta-proposal-detail-schema-workaround-hash";
import type { BetaProposalDetailSchemaWorkaroundLoanDefaultDate } from "./beta-proposal-detail-schema-workaround-loan-default-date";
import type { BetaProposalDetailSchemaWorkaroundMinCollateralAmount } from "./beta-proposal-detail-schema-workaround-min-collateral-amount";
import type { BetaProposalDetailSchemaWorkaroundMinCreditAmount } from "./beta-proposal-detail-schema-workaround-min-credit-amount";
import type { BetaProposalDetailSchemaWorkaroundMultiproposalMerkleRoot } from "./beta-proposal-detail-schema-workaround-multiproposal-merkle-root";
import type { BetaProposalDetailSchemaWorkaroundNonce } from "./beta-proposal-detail-schema-workaround-nonce";
import type { BetaProposalDetailSchemaWorkaroundNonceSpace } from "./beta-proposal-detail-schema-workaround-nonce-space";
import type { BetaProposalDetailSchemaWorkaroundProposalContractAddress } from "./beta-proposal-detail-schema-workaround-proposal-contract-address";
import type { BetaProposalDetailSchemaWorkaroundProposalId } from "./beta-proposal-detail-schema-workaround-proposal-id";
import type { BetaProposalDetailSchemaWorkaroundProposerSpecHash } from "./beta-proposal-detail-schema-workaround-proposer-spec-hash";
import type { BetaProposalDetailSchemaWorkaroundRefinancingLoanId } from "./beta-proposal-detail-schema-workaround-refinancing-loan-id";
import type { BetaProposalDetailSchemaWorkaroundRelatedThesisId } from "./beta-proposal-detail-schema-workaround-related-thesis-id";
import type { BetaProposalDetailSchemaWorkaroundRevokedAt } from "./beta-proposal-detail-schema-workaround-revoked-at";
import type { BetaProposalDetailSchemaWorkaroundSignature } from "./beta-proposal-detail-schema-workaround-signature";
import type { BetaProposalDetailSchemaWorkaroundSourceOfFunds } from "./beta-proposal-detail-schema-workaround-source-of-funds";
import type { BetaProposalDetailSchemaWorkaroundStatus } from "./beta-proposal-detail-schema-workaround-status";
import type { BetaProposalDetailSchemaWorkaroundType } from "./beta-proposal-detail-schema-workaround-type";
import type { ChainIdEnum } from "./chain-id-enum";
import type { CreditDataSchemaWorkaround } from "./credit-data-schema-workaround";

export interface BetaProposalDetailSchemaWorkaround {
	id: string;
	duration: BetaProposalDetailSchemaWorkaroundDuration;
	loanDefaultDate?: BetaProposalDetailSchemaWorkaroundLoanDefaultDate;
	expiration?: BetaProposalDetailSchemaWorkaroundExpiration;
	status: (typeof BetaProposalDetailSchemaWorkaroundStatus)[keyof typeof BetaProposalDetailSchemaWorkaroundStatus];
	collateral: AssetDetailSchemaWorkaround;
	collateralAmount: string;
	minCollateralAmount?: BetaProposalDetailSchemaWorkaroundMinCollateralAmount;
	minCreditAmount?: BetaProposalDetailSchemaWorkaroundMinCreditAmount;
	creditData: CreditDataSchemaWorkaround;
	creditAsset: AssetDetailSchemaWorkaround;
	chainId: ChainIdEnum;
	proposalContractAddress?: BetaProposalDetailSchemaWorkaroundProposalContractAddress;
	proposalId?: BetaProposalDetailSchemaWorkaroundProposalId;
	loanContract: string;
	proposer: string;
	isOffer: boolean;
	type: BetaProposalDetailSchemaWorkaroundType;
	sourceOfFunds?: BetaProposalDetailSchemaWorkaroundSourceOfFunds;
	relatedThesisId?: BetaProposalDetailSchemaWorkaroundRelatedThesisId;
	createdFromProposalId?: BetaProposalDetailSchemaWorkaroundCreatedFromProposalId;
	checkCollateralStateFingerprint: boolean;
	collateralStateFingerprint: BetaProposalDetailSchemaWorkaroundCollateralStateFingerprint;
	availableCreditLimit: string;
	allowedAcceptor: BetaProposalDetailSchemaWorkaroundAllowedAcceptor;
	refinancingLoanId: BetaProposalDetailSchemaWorkaroundRefinancingLoanId;
	nonceSpace: BetaProposalDetailSchemaWorkaroundNonceSpace;
	nonce: BetaProposalDetailSchemaWorkaroundNonce;
	proposerSpecHash: BetaProposalDetailSchemaWorkaroundProposerSpecHash;
	signature: BetaProposalDetailSchemaWorkaroundSignature;
	multiproposalMerkleRoot: BetaProposalDetailSchemaWorkaroundMultiproposalMerkleRoot;
	isOnChain: boolean;
	hash: BetaProposalDetailSchemaWorkaroundHash;
	createdAt: number;
	revokedAt: BetaProposalDetailSchemaWorkaroundRevokedAt;
}
